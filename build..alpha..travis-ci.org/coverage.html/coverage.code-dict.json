{"/home/travis/build/npmtest/node-npmtest-intelligence/test.js":"/* istanbul instrument in package npmtest_intelligence */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-intelligence/lib.npmtest_intelligence.js":"/* istanbul instrument in package npmtest_intelligence */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_intelligence = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_intelligence = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-intelligence/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-intelligence && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_intelligence */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_intelligence\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_intelligence.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_intelligence.rollup.js'] =\n            local.assetsDict['/assets.npmtest_intelligence.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_intelligence.__dirname + '/lib.npmtest_intelligence.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/intelligence.js":"// genetic\r\nexports.Population = require('./genetic/population').Population;\r\nexports.SteadyStatePopulation = require('./genetic/steadyStatePopulation').SteadyStatePopulation;\r\nexports.Individual = require('./genetic/individual').Individual;\r\nexports.crossoverStrategies = require('./genetic/crossoverStrategies');\r\nexports.selectionStrategies = require('./genetic/selectionStrategies');\r\nexports.geneFactories = require('./genetic/geneFactories');\r\n\r\n// linear\r\nexports.RegisterSet = require('./genetic/linear/registerSet').RegisterSet;\r\nexports.LinearGPNode = require('./genetic/linear/linearGPNode').LinearGPNode;\r\nexports.LinearFunctionNode = require('./genetic/linear/linearFunctionNode').LinearFunctionNode;\r\nexports.LinearConditionalNode = require('./genetic/linear/linearConditionalNode').LinearConditionalNode;\r\nexports.LinearIndividual = require('./genetic/linear/linearIndividual').LinearIndividual;\r\n\r\n// infrastructure\r\nexports.utils = require('./infrastructure/utils');\r\n\r\n// neural\r\nexports.transferFunctions = require('./neural/transferFunctions');","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/genetic/population.js":"var events = require('events');\r\nvar utils = require('./../infrastructure/utils');\r\nvar selectionStrategies = require('./selectionStrategies');\r\n\r\n/**\r\n * Genetic algorithm population\r\n * @constructor\r\n * @param {object} options - Population options\r\n * @param {Individual} options.baseIndividual -\r\n * @property {object} options - Population options\r\n */\r\nvar Population = function (options) {\r\n\r\n    this.options = options;\r\n    this.individuals = null;\r\n    this.validateRequiredOptions();\r\n    this.setDefaultOptionsIfNotProvided();\r\n    this.initialise();\r\n    events.EventEmitter.call(this);\r\n    return this;\r\n};\r\n\r\nutils.inherits(Population, events.EventEmitter);\r\n\r\n/**\r\n * Throws an exception if a required option is missing\r\n * @throws An exception is thrown if a required option is missing\r\n * @returns {Population} Reference to current object for chaining\r\n */\r\nPopulation.prototype.validateRequiredOptions = function () {\r\n    if (!this.options) {\r\n        throw \"options are required\";\r\n    } else if (!this.options.baseIndividual) {\r\n        throw \"option 'baseIndividual' is required\";\r\n    } else if (!this.options.crossoverStrategy) {\r\n        throw \"option 'crossoverStrategy' is required\";\r\n    } else if (!this.options.fitnessFunction) {\r\n        throw \"options 'fitnessFunction' is required\";\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets default values for options that have not been defined\r\n * @returns {Population} Reference to current object for chaining\r\n */\r\nPopulation.prototype.setDefaultOptionsIfNotProvided = function () {\r\n    if (!this.options.populationSize) {\r\n        this.options.populationSize = 100;\r\n    }\r\n    if (this.options.crossoverRate === undefined) {\r\n        this.options.crossoverRate = 0.75;\r\n    }\r\n    if (this.options.mutationRate === undefined) {\r\n        this.options.mutationRate = 0.2;\r\n    }\r\n    if (!this.options.tournamentSize) {\r\n        this.options.tournamentSize = 2;\r\n    }\r\n    if (!this.options.selectionStrategy) {\r\n        this.options.selectionStrategy = selectionStrategies.tournament;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Creates a randomly generated population of individuals\r\n * @returns {Population} Reference to current object for chaining\r\n */\r\nPopulation.prototype.initialise = function () {\r\n    this.individuals = [];\r\n    for (var i = 0; i < this.options.populationSize; i++) {\r\n        this.individuals.push(this.options.baseIndividual.createNew());\r\n    }\r\n    return this.evaluateFitness();\r\n};\r\n\r\n/**\r\n * Calculates the fitness of each individual where the fitness value is null\r\n * @returns {Population} Reference to current object for chaining\r\n */\r\nPopulation.prototype.evaluateFitness = function () {\r\n    for (var i = 0; i < this.individuals.length; i++) {\r\n        var individual = this.individuals[i];\r\n        if (individual.fitness === null) {\r\n            individual.fitness = this.options.fitnessFunction(individual);\r\n        }\r\n    }\r\n    return this.filterNanFitness().setNormalisedFitness();\r\n};\r\n\r\n/**\r\n * Performs crossover using the crossoverStrategy function defined in the population options\r\n * @returns {Population} Reference to current object for chaining\r\n */\r\nPopulation.prototype.crossover = function () {\r\n    this.evaluateFitness();\r\n    var limbo = [];\r\n    if (this.options.elitism) {\r\n        var elite = this.getFittestIndividuals(this.options.elitism);\r\n        for (var i = 0; i < elite.length; i++) {\r\n            limbo.push(elite[i].copy());\r\n        }\r\n    }\r\n    while (limbo.length < this.individuals.length) {\r\n        var selections = this.options.selectionStrategy(this);\r\n        if (utils.random() < this.options.crossoverRate) {\r\n            selections = this.options.crossoverStrategy(selections, this.options);\r\n            for (var i = 0; i < selections.length; i++) selections[i].fitness = null;\r\n        }\r\n        limbo = limbo.concat(selections);\r\n    }\r\n    this.individuals = limbo;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Mutates the population based on the mutationRate property in the population options\r\n * @returns {Population} Reference to current object for chaining\r\n */\r\nPopulation.prototype.mutate = function () {\r\n    this.evaluateFitness();\r\n    var elite = this.options.elitism ? this.getFittestIndividuals(this.options.elitism) : null;\r\n    for (var i = 0; i < this.individuals.length; i++) {\r\n        if (!elite || elite.indexOf(this.individuals[i]) === -1) {\r\n            if (utils.random() < this.options.mutationRate) {\r\n                this.individuals[i].mutate();\r\n                this.individuals[i].fitness = null;\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Returns a specified number of individuals with the best fitness rating in the population\r\n * @param {number} [numIndividuals=1] - The number of individuals to return\r\n * @returns {Individual[]} An array of the fittest individuals in the population\r\n */\r\nPopulation.prototype.getFittestIndividuals = function (numIndividuals) {\r\n    this.evaluateFitness();\r\n    var self = this;\r\n    if (!numIndividuals) numIndividuals = 1;\r\n    return this.individuals.sort(function (a, b) {\r\n        if (a.fitness === null && b.fitness === null) {\r\n            return 0;\r\n        } else if (a.fitness === null) {\r\n            return -1;\r\n        } else if (b.fitness === null) {\r\n            return 1;\r\n        } else {\r\n            return b.normalisedFitness - a.normalisedFitness;\r\n        }\r\n    }).slice(0, numIndividuals);\r\n};\r\n\r\n/**\r\n * Calculate the average fitness of all individuals in the population (exluding infinite values)\r\n * @returns {number} Average fitness of the population\r\n */\r\nPopulation.prototype.getAverageFitness = function () {\r\n    var sum = this.getSumFitness();\r\n    return sum / this.individuals.length;\r\n};\r\n\r\n/**\r\n * Calculate the sum of all individual fitness values\r\n * @returns {number} Sum of all individual fitness values\r\n */\r\nPopulation.prototype.getSumFitness = function () {\r\n    var sum = 0;\r\n    for (var i = 0; i < this.individuals.length; i++) {\r\n        if (isFinite(this.individuals[i].fitness)) {\r\n            sum += this.individuals[i].fitness;\r\n        }\r\n    }\r\n    return sum;\r\n};\r\n\r\nPopulation.prototype.getSumNormalisedFitness = function () {\r\n    var sum = 0;\r\n    for (var i = 0; i < this.individuals.length; i++) {\r\n        if (isFinite(this.individuals[i].normalisedFitness)) {\r\n            sum += this.individuals[i].normalisedFitness;\r\n        }\r\n    }\r\n    return sum;\r\n};\r\n\r\n/**\r\n * Sets the normalised fitness for each individual in the population\r\n * @returns {Population} Reference to current object for chaining\r\n */\r\nPopulation.prototype.setNormalisedFitness = function () {\r\n    var i, individual, normalised;\r\n    var sum = this.getSumFitness();\r\n    for (i = 0; i < this.individuals.length; i++) {\r\n        individual = this.individuals[i];\r\n        if (isNaN(individual.fitness)) {\r\n            individual.normalisedFitness = 0;\r\n        } else if (!isFinite(individual.fitness)) {\r\n            if (individual.fitness > 0) {\r\n                individual.normalisedFitness = this.options.isMinimise ? 0 : 1;\r\n            } else {\r\n                individual.normalisedFitness = this.options.isMinimise ? 1 : 0;\r\n            }\r\n        } else {\r\n            normalised = individual.fitness / sum;\r\n            normalised = this.options.isMinimise ? 1 - normalised : normalised;\r\n            individual.normalisedFitness = isNaN(normalised) ? 0 : normalised;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Applies a single iteration of selection, crossover and mutation to the population\r\n * @returns {Population} Reference to current object for chaining\r\n */\r\nPopulation.prototype.step = function () {\r\n    return this.evaluateFitness().crossover().mutate().evaluateFitness();\r\n};\r\n\r\n/**\r\n * Trains the population over a specified number of generations\r\n * @param {number} numGenerations - The number of generations to train the population over\r\n * @returns {Population} Reference to current object for chaining\r\n */\r\nPopulation.prototype.train = function (numGenerations) {\r\n    if (numGenerations <= 0) {\r\n        throw \"'numGenerations' must greater than 0\";\r\n    } else {\r\n        for (var i = 0; i < numGenerations; i++) {\r\n            this.step();\r\n            this.emit('generationCompleted', this, i);\r\n        }\r\n    }\r\n    this.emit('trainingCompleted', this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Subsitutes an individuals fitness to positive or negative infinity if it isNaN\r\n * @returns {Population} Reference to current object for chaining\r\n */\r\nPopulation.prototype.filterNanFitness = function () {\r\n    var value = this.options.isMinimise ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\r\n    for (var i = 0; i < this.individuals.length; i++) {\r\n        var individual = this.individuals[i];\r\n        if (isNaN(individual.fitness)) {\r\n            individual.fitness = value\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Save the population to a file\r\n * @param {string} filePath - Path to file\r\n * @callback {writeToFileCallback} cb - Callback handler\r\n */\r\nPopulation.prototype.saveToFile = function (filePath, cb) {\r\n    var serialised = utils.serialise(this);\r\n    utils.writeToFile(filePath, serialised, cb);\r\n};\r\n\r\n/**\r\n * Load a population from a file\r\n * @static\r\n * @param {string} filePath - Path to file\r\n * @callback {loadFromFileCallback} cb - Callback handler\r\n */\r\nPopulation.loadFromFile = function (filePath, cb) {\r\n    utils.readFromFile(filePath, function (err, data) {\r\n        if (err) {\r\n            cb(err);\r\n        } else {\r\n            var deserialised = utils.deserialise(data);\r\n            return deserialised;\r\n        }\r\n    });\r\n};\r\n\r\nexports.Population = Population;","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/infrastructure/utils.js":"var fs = require('fs');\r\nvar util = require('util');\r\nvar serialize = require('node-serialize');\r\n\r\n/**\r\n * Returns a random whole number between a specified range\r\n * @param {number} min - Minimum value (inclusive)\r\n * @param {number} max - Maximum value (exclusive)\r\n * @returns A random whole number between a specified range\r\n */\r\nexports.randBetween = function (min, max) {\r\n    var val = Math.floor(Math.random() * (max - min + 1) + min);\r\n    return val === max ? val - 1 : val;\r\n};\r\n\r\n/**\r\n * Returns a random number between 0 and 1\r\n * @returns A random number between 0 and 1\r\n */\r\nexports.random = function () {\r\n    return Math.random();\r\n};\r\n\r\n/**\r\n * Returns a randomly selected element from an array\r\n * @param {array} from - An array to select an element from\r\n * @returns A randomly selected element from the provided array\r\n */\r\nexports.selectRandom = function (from) {\r\n    return from[exports.randBetween(0, from.length)];\r\n};\r\n\r\n/**\r\n * Performs floating point comparison between two numbers with an epsilon of 0.00001\r\n * @param {number} a - The first number to compare\r\n * @param {number} b - The second number to compare\r\n * @returns {boolean} True if the provided numbers are equal, otherwise false\r\n */\r\nexports.fpEqual = function (a, b) {\r\n    return (a - b) <= 0.00001;\r\n};\r\n\r\n/**\r\n * Compares two arrays by each element\r\n * @param {array} a - The first array to compare\r\n * @param {array} b - The second array to compare\r\n * @returns {boolean} True if the provided arrays are equal, otherwise false\r\n */\r\nexports.arrayEqual = function (a, b) {\r\n    if (a === b) return true;\r\n    if (a == null || b == null) return false;\r\n    if (a.length != b.length) return false;\r\n    for (var i = 0; i < a.length; ++i) {\r\n        if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n};\r\n\r\n/**\r\n * Replaces each tag in the provided string with its corresponding parameter element\r\n * @param {string} stringVar - String to convert\r\n * @param {array} argsArray - An array of arguments\r\n * @returns {string} Converted string\r\n */\r\nexports.formatString = function (stringVar, argsArray) {\r\n    return stringVar.replace(/{(\\d+)}/g, function (match, number) {\r\n        return typeof argsArray[number] != 'undefined' ? argsArray[number] : match;\r\n    });\r\n};\r\n\r\n/**\r\n * Calls node util.inherits function\r\n */\r\nexports.inherits = function (constructor, superConstructor) {\r\n    util.inherits(constructor, superConstructor);\r\n};\r\n\r\n/**\r\n * Serialises object to string\r\n * @param {object} obj - Object to serialize\r\n */\r\nexports.serialise = function (obj) {\r\n    return serialize.serialize(obj);\r\n};\r\n\r\n/**\r\n * Deserialises string to object\r\n * @param {object} str - String to deserialise\r\n */\r\nexports.deserialise = function (str) {\r\n    return serialize.unserialize(str);\r\n};\r\n\r\n/**\r\n * Writes string to a file\r\n * @param {string} filePath - Path to file\r\n * @param {string} data - Data to be written to file\r\n * @param {writeToFileCallback} cb - Callback handler\r\n */\r\nexports.writeToFile = function (filePath, data, cb) {\r\n    fs.writeFile(filePath, data, cb);\r\n};\r\n\r\n/**\r\n * Reads string from a file\r\n * @param {string} filePath - Path to file\r\n * @param {readFromFileCallback} cb - Callback handler\r\n */\r\nexports.readFromFile = function (filePath, cb) {\r\n    fs.readFile(filePath, 'utf8', cb);\r\n};","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/genetic/selectionStrategies.js":"var utils = require('./../infrastructure/utils');\r\n\r\n/**\r\n * Returns two randomly selected individuals\r\n * @param {Individual[]} individuals - An array of individuals\r\n * @param {object} options - Population options\r\n */\r\nexports.random = function (population) {\r\n    var individuals = population.individuals;\r\n    var selections = [individuals[utils.randBetween(0, individuals.length)]];\r\n    while (true) {\r\n        var spouse = individuals[utils.randBetween(0, individuals.length)];\r\n        if (spouse !== selections[0]) {\r\n            selections.push(spouse);\r\n            break;\r\n        }\r\n    }\r\n    return selections;\r\n};\r\n\r\n/**\r\n * Returns two individuals using the rank selection algorithm\r\n * @param {Population} population - A population instance\r\n */\r\nexports.rank = function (population) {\r\n    var a = utils.random();\r\n    var b = utils.random();\r\n    var selectionA, selectionB;\r\n    var runningTotal = 0;\r\n    var numIndividuals = population.individuals.length;\r\n    var sum = (numIndividuals * (numIndividuals + 1)) / 2;\r\n    var individuals = population.individuals.sort(function (a, b) {\r\n        return a.normalisedFitness - b.normalisedFitness;\r\n    });\r\n    for (var i = individuals.length - 1; i >= 0; i--) {\r\n        runningTotal += ((i + 1) / sum);\r\n        if (runningTotal >= a && !selectionA) {\r\n            selectionA = individuals[i];\r\n        }\r\n        if (runningTotal >= b && !selectionB) {\r\n            selectionB = individuals[i];\r\n        }\r\n        if (selectionA && selectionB) {\r\n            break;\r\n        }\r\n    }\r\n    return [selectionA, selectionB];\r\n};\r\n\r\n/**\r\n * Returns two individuals using the tournament selection algorithm\r\n * @param {Population} population - A population instance\r\n */\r\nexports.tournament = function (population) {\r\n    var selections = [];\r\n    var individuals = population.individuals;\r\n    for (var i = 0; i < 2; i++) {\r\n        var tournament = [];\r\n        for (var j = 0; j < population.options.tournamentSize; j++) {\r\n            var selection = utils.selectRandom(population.individuals);\r\n            tournament.push(selection);\r\n        }\r\n        var winner = tournament[0];\r\n        for (var j = 1; j < tournament.length; j++) {\r\n            if (tournament[j].normalisedFitness > winner.normalisedFitness) winner = tournament[j];\r\n        }\r\n        selections.push(winner);\r\n    }\r\n    return selections;\r\n};\r\n\r\n/**\r\n * Returns two individuals using the roulette wheel selection algorithm\r\n * @param {Population} population - A population instance\r\n */\r\nexports.rouletteWheel = function (population) {\r\n    var selections = [];\r\n    var a = utils.random();\r\n    var b = utils.random();\r\n    var runningTotal = 0;\r\n    var selectionA, selectionB;\r\n    var sum = population.getSumNormalisedFitness();\r\n    for (var i = 0; i < population.individuals.length; i++) {\r\n        var individual = population.individuals[i];\r\n        runningTotal += individual.normalisedFitness / sum;\r\n        if (runningTotal > a && !selectionA) {\r\n            selectionA = individual;\r\n        }\r\n        if (runningTotal >= b && !selectionB) {\r\n            selectionB = individual;\r\n        }\r\n        if (selectionA && selectionB) {\r\n            break;\r\n        }\r\n    }\r\n    return [selectionA, selectionB];\r\n};","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/genetic/steadyStatePopulation.js":"var utils = require('./../infrastructure/utils');\r\nvar selectionStrategies = require('./selectionStrategies');\r\nvar Population = require('./population').Population;\r\n\r\nvar SteadyStatePopulation = function (options) {\r\n    Population.call(this, options);\r\n};\r\n\r\nutils.inherits(SteadyStatePopulation, Population);\r\n\r\nSteadyStatePopulation.prototype.step = function () {\r\n    var selections = this.options.selectionStrategy(this);\r\n    if (utils.random() < this.options.crossoverRate) {\r\n        selections = this.options.crossoverStrategy(selections);\r\n    }\r\n    for (var i = 0; i < 2; i++) {\r\n        if (utils.random() < this.options.mutationRate) {\r\n            selections[i].mutate();\r\n        }\r\n    }\r\n    this.individuals[utils.randBetween(0, this.individuals.length)] = selections[0];\r\n    this.individuals[utils.randBetween(0, this.individuals.length)] = selections[1];\r\n    return this;\r\n};\r\n\r\nexports.SteadyStatePopulation = SteadyStatePopulation;","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/genetic/individual.js":"var utils = require('./../infrastructure/utils');\r\nvar clone = require('clone');\r\n\r\n/**\r\n * Genetic algorithm individual\r\n * @constructor\r\n * @param {object} options - Individual options\r\n * @param {number} options.minLength - The minimum number of genes\r\n * @param {number} options.maxLength - The maximum number of genes\r\n * @param {function} options.geneFactory - A function that returns a random gene\r\n * @property {object[]} body - An array of genes that represent a single chromosome\r\n * @property {number} fitness - The individuals fitness rating\r\n * @property {object} options - Individual options\r\n */\r\nvar Individual = function (options) {\r\n    this.body = null;\r\n    this.fitness = null;\r\n    this.normalisedFitness = null;\r\n    this.options = options;\r\n    this.validateRequiredOptions();\r\n    this.initialise();\r\n    return this;\r\n};\r\n\r\n/**\r\n * Validates the individuals current options\r\n * @throws An exception will occur if a required option is missing\r\n * @returns {Individual} Reference to current object for chaining\r\n */\r\nIndividual.prototype.validateRequiredOptions = function () {\r\n    if (!this.options) {\r\n        throw \"options are required\";\r\n    } else if (this.options.minLength === undefined) {\r\n        throw \"option 'minLength' is required\";\r\n    } else if (this.options.maxLength === undefined) {\r\n        throw \"option 'maxLength' is required\";\r\n    } else if (!this.options.geneFactory) {\r\n        throw \"option 'geneFactory' is required\";\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Re creates the individuals body with randomly generated genes\r\n * @returns {Individual} Reference to current object for chaining\r\n */\r\nIndividual.prototype.initialise = function () {\r\n    var length = utils.randBetween(this.options.minLength, this.options.maxLength + 1);\r\n    this.body = [];\r\n    for (var i = 0; i < length; i++) {\r\n        this.body.push(this.options.geneFactory(this));\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Creates a deep copy of the individual\r\n * @returns {Individual} A copy of the Individual instance\r\n */\r\nIndividual.prototype.copy = function () {\r\n    return clone(this);\r\n};\r\n\r\n/**\r\n * Creates a deep copy of the individual and then re initialises\r\n * @returns {Individual} A new individual based on the current individual\r\n */\r\nIndividual.prototype.createNew = function () {\r\n    var newIndividual = this.copy();\r\n    newIndividual.initialise();\r\n    return newIndividual;\r\n};\r\n\r\n/**\r\n * Mutates the individual by swapping a single gene with a randomly created gene\r\n * @returns {Individual} Reference to current object for chaining\r\n */\r\nIndividual.prototype.mutate = function () {\r\n    this.body[utils.randBetween(0, this.body.length)] = this.options.geneFactory(this);\r\n    this.fitness = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Determine whether the individual body length is fixed (i.e. minLength === maxLength)\r\n * @returns {boolean} A true value if the indiviuals body is of fixed length\r\n */\r\nIndividual.prototype.isFixedLength = function () {\r\n    return this.options.minLength === this.options.maxLength;\r\n};\r\n\r\nexports.Individual = Individual;","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/genetic/crossoverStrategies.js":"var utils = require('./../infrastructure/utils');\r\n\r\n/**\r\n * Throws an exception if any individuals have less than two genes\r\n * @param {Individual[]} individuals - An array of individuals to validate\r\n * @throws An exception is thrown if any individuals have less than two genes\r\n */\r\nvar validateMinimumLength = function (individuals) {\r\n    if (individuals[0].body.length < 2 || individuals[0].body.length < 2) {\r\n        throw \"individuals must have at least two genes for crossover\";\r\n    }\r\n};\r\n\r\n/**\r\n * Throws an exception if any individuals are not fixed length or of different lengths\r\n * @param {Individual[]} individuals - An array of individuals to validate\r\n * @throws An exception is thrown if any individuals are not fixed length\r\n */\r\nvar validateFixedLength = function (individuals) {\r\n    if (!(individuals[0].isFixedLength() && individuals[1].isFixedLength()) ||\r\n        (individuals[0].body.length !== individuals[1].body.length)) {\r\n        throw \"individuals must be of a fixed length and equal in length for crossover\";\r\n    }\r\n};\r\n\r\n/**\r\n * Swaps genes between two individuals at the specified index\r\n * @param {Individual} indvidualA - The first individual\r\n * @param {Individual} indvidualB - The second individual\r\n * @param {number} index - Body array index to swap genes at\r\n */\r\nvar swapGenes = function (indvidualA, indvidualB, index) {\r\n    var temp = indvidualA.body[index];\r\n    indvidualA.body[index] = indvidualB.body[index];\r\n    indvidualB.body[index] = temp;\r\n};\r\n\r\n\r\n/**\r\n * Performs uniform crossover\r\n * @param {Individual[]} individuals - An array containing two individuals\r\n * @returns {Individual[]} An array containing two offspring\r\n */\r\nexports.uniform = function (individuals) {\r\n    validateMinimumLength(individuals);\r\n    validateFixedLength(individuals);\r\n    var offspringA = individuals[0].copy();\r\n    var offspringB = individuals[1].copy();\r\n    for (var i = 0; i < offspringA.body.length; i++) {\r\n        if (utils.random() < 0.5) {\r\n            swapGenes(offspringA, offspringB, i);\r\n        }\r\n    }\r\n    return [offspringA, offspringB];\r\n};\r\n\r\n/**\r\n * Performs one point crossover\r\n * @param {Individual[]} individuals - An array containing two individuals\r\n * @returns {Individual[]} An array containing two offspring\r\n */\r\nexports.onePoint = function (individuals) {\r\n    validateMinimumLength(individuals);\r\n    var offspringA = individuals[0].copy();\r\n    var offspringB = individuals[1].copy();\r\n    var indexA, indexB, newSizeA, newSizeB, cuts;\r\n    var validCuts = [];\r\n    var indexA = utils.randBetween(0, offspringA.body.length);\r\n    for (indexB = 0; indexB < offspringB.body.length; indexB++) {\r\n        newSizeA = indexA + (offspringB.body.length - indexB);\r\n        newSizeB = indexB + (offspringA.body.length - indexA);\r\n        if (newSizeA >= offspringA.options.minLength && newSizeA <= offspringA.options.maxLength &&\r\n            newSizeB >= offspringB.options.minLength && newSizeB <= offspringB.options.maxLength) {\r\n            validCuts.push({\r\n                a: indexA,\r\n                b: indexB\r\n            });\r\n        }\r\n    }\r\n    cuts = utils.selectRandom(validCuts);\r\n    offspringA.body = individuals[0].body.slice(0, cuts.a).concat(individuals[1].body.slice(cuts.b));\r\n    offspringB.body = individuals[1].body.slice(0, cuts.b).concat(individuals[0].body.slice(cuts.a));\r\n    return [offspringA, offspringB];\r\n};\r\n\r\n/**\r\n * Performs two point crossover\r\n * @param {Individual[]} individuals - An array containing two individuals\r\n * @returns {Individual[]} An array containing two offspring\r\n */\r\nexports.twoPoint = function (individuals) {\r\n    validateMinimumLength(individuals);\r\n    var offspringA = individuals[0].copy();\r\n    var offspringB = individuals[1].copy();\r\n    var indexC, indexD, cuts, newSizeA, newSizeB;\r\n    var validCuts = [];\r\n    var indexA = utils.randBetween(0, offspringA.body.length - 1);\r\n    var indexB = utils.randBetween(indexA + 1, offspringA.body.length);\r\n    for (indexC = 0; indexC < offspringB.body.length; indexC++) {\r\n        for (indexD = indexC + 1; indexD < offspringB.body.length; indexD++) {\r\n            newSizeA = offspringA.body.length - (indexB - indexA) + (indexD - indexC);\r\n            newSizeB = offspringB.body.length - (indexD - indexC) + (indexB - indexA);\r\n            if (newSizeA <= offspringA.options.maxLength &&\r\n                newSizeA >= offspringA.options.minLength &&\r\n                newSizeB <= offspringB.options.maxLength &&\r\n                newSizeB >= offspringB.options.minLength) {\r\n                validCuts.push({\r\n                    a: indexA,\r\n                    b: indexB,\r\n                    c: indexC,\r\n                    d: indexD\r\n                });\r\n            }\r\n        }\r\n    }\r\n    cuts = utils.selectRandom(validCuts);\r\n    offspringA.body = individuals[0].body.slice(0, cuts.a);\r\n    offspringB.body = individuals[1].body.slice(0, cuts.c);\r\n    offspringA.body = offspringA.body.concat(individuals[1].body.slice(cuts.c, cuts.d + 1));\r\n    offspringB.body = offspringB.body.concat(individuals[0].body.slice(cuts.a, cuts.b + 1));\r\n    offspringA.body = offspringA.body.concat(individuals[0].body.slice(cuts.b + 1));\r\n    offspringB.body = offspringB.body.concat(individuals[1].body.slice(cuts.d + 1));\r\n    return [offspringA, offspringB];\r\n};","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/genetic/geneFactories.js":"var utils = require('./../infrastructure/utils');\r\nvar LinearFunctionNode = require('./linear/linearFunctionNode').LinearFunctionNode;\r\nvar LinearConditionalNode = require('./linear/linearConditionalNode').LinearConditionalNode;\r\n\r\n/**\r\n * Returns a random number between 0 and 1\r\n * @returns {number} A random number between 0 and 1\r\n */\r\nexports.randomNumber = function () {\r\n    return utils.random();\r\n};\r\n\r\n/**\r\n * Returns a random binary number\r\n * @returns {number} A random binary number\r\n */\r\nexports.binaryNumber = function () {\r\n    return utils.random() < 0.5 ? 0 : 1;\r\n};\r\n\r\n/**\r\n * Returns a random binary string\r\n * @returns {number} A random binary string\r\n */\r\nexports.binaryString = function () {\r\n    return utils.random() < 0.5 ? '0' : '1';\r\n};\r\n\r\n/**\r\n * Returns a random letter in the alphabet, including uppercase characters and whitespace\r\n * @returns {string} A random letter in the alphabet\r\n */\r\nexports.alphabet = function () {\r\n    var letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz '.split('');\r\n    return letters[utils.randBetween(0, letters.length)];\r\n};\r\n\r\n/**\r\n * Returns a random linear node for linear genetic programming\r\n * @param {LinearIndividual} A linear individual to create a node for\r\n * @returns {LinearGPNode} A random linear node\r\n */\r\nexports.linearNode = function (individual) {\r\n    var options = individual.options;\r\n    var totalFunctions = options.functionSet.length + options.conditionalSet.length;\r\n    var functionProbability = options.functionSet.length / totalFunctions;\r\n    if (utils.random() < functionProbability) {\r\n        var func = utils.selectRandom(options.functionSet)\r\n        return new LinearFunctionNode(func, options.registerSet);\r\n    } else {\r\n        var func = utils.selectRandom(options.conditionalSet)\r\n        return new LinearConditionalNode(func, options.registerSet);\r\n    }\r\n};","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/genetic/linear/linearFunctionNode.js":"var utils = require('./../../infrastructure/utils');\r\nvar LinearGPNode = require('./linearGPNode').LinearGPNode;\r\nvar registerReference = require('./registerReference');\r\n\r\n/**\r\n * Linear genetic programming function node\r\n * @constructor\r\n * @extends LinearGPNode\r\n * @param {function} func - A function that this node will represent\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @property {RegisterReference} targetRegister - A target register reference\r\n */\r\nvar LinearFunctionNode = function (func, registerSet) {\r\n    LinearGPNode.call(this, func, registerSet);\r\n    this.targetRegister = null;\r\n    this.setTargetRegister(registerSet);\r\n    return this;\r\n};\r\n\r\nutils.inherits(LinearFunctionNode, LinearGPNode);\r\n\r\n/**\r\n * Randomly sets the target register based on the provided register set\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @returns {LinearFunctionNode} Reference to current object for chaining\r\n */\r\nLinearFunctionNode.prototype.setTargetRegister = function (registerSet) {\r\n    this.targetRegister = registerReference.createRandomWritable(registerSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets the target register value based on the return value of the function from the given register set\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @returns {LinearFunctionNode} Reference to current object for chaining\r\n */\r\nLinearFunctionNode.prototype.execute = function (registerSet) {\r\n    this.targetRegister.setValue(registerSet, this.getFuncReturnValue(registerSet));\r\n    return this;\r\n};\r\n\r\n/**\r\n * Returns a string representation of the linear function node\r\n * @returns {string} A string representation of the linear function node\r\n */\r\nLinearFunctionNode.prototype.toString = function () {\r\n    var argumentsArray = [this.targetRegister.toString(), this.func.name, this.getArgumentsString()];\r\n    return utils.formatString(\"{0} = {1}({2});\", argumentsArray);\r\n};\r\n\r\nexports.LinearFunctionNode = LinearFunctionNode;","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/genetic/linear/linearGPNode.js":"var registerReference = require('./registerReference');\r\nvar utils = require('./../../infrastructure/utils');\r\n\r\n/**\r\n * Linear genetic programming node\r\n * @constructor\r\n * @param {function} func - A function that this node will represent\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @property {function} func - Linear indivdual options\r\n * @property {RegisterReference[]} inputRegisters - An array of register references\r\n */\r\nvar LinearGPNode = function (func, registerSet) {\r\n    this.func = func;\r\n    this.inputRegisters = null;\r\n    this.setInputRegisters(registerSet);\r\n};\r\n\r\n/**\r\n * Randomly sets two input registers based on the provided register set\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @returns {LinearGPNode} Reference to current object for chaining\r\n */\r\nLinearGPNode.prototype.setInputRegisters = function (registerSet) {\r\n    this.inputRegisters = [];\r\n    for (var i = 0; i < this.func.length; i++) {\r\n        this.inputRegisters.push(registerReference.createRandomReadable(registerSet));\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Returns the value returned by the nodes function based on the input values from a given register set\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @returns {*} Functon return value\r\n */\r\nLinearGPNode.prototype.getFuncReturnValue = function (registerSet) {\r\n    var arguments = [];\r\n    for (var i = 0; i < this.inputRegisters.length; i++) {\r\n        arguments.push(this.inputRegisters[i].getValue(registerSet));\r\n    }\r\n    return this.func.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * Returns a comma seperated string of input registers\r\n * @returns {string} A comma seperated string of input registers\r\n */\r\nLinearGPNode.prototype.getArgumentsString = function () {\r\n    var arguments = \"\";\r\n    for (var i = 0; i < this.inputRegisters.length; i++) {\r\n        arguments += this.inputRegisters[i].toString();\r\n        if (i !== this.inputRegisters.length - 1) {\r\n            arguments += \", \";\r\n        }\r\n    }\r\n    return arguments;\r\n};\r\n\r\nexports.LinearGPNode = LinearGPNode;","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/genetic/linear/registerReference.js":"var utils = require('./../../infrastructure/utils');\r\n\r\n/**\r\n * Linear genetic programming register reference\r\n * @constructor\r\n * @param {string} flag - The register set property name\r\n * @param {RegisterSet} registerSet - The register set to randomly select an index from\r\n * @param {number} index - Optional user specified index\r\n * @property {string} flag - The register set property name\r\n * @property {number} index - The register set array index\r\n */\r\nvar RegisterReference = function (flag, registerSet, index) {\r\n    if (!registerSet[flag]) {\r\n        throw \"Property does not exist\";\r\n    }\r\n    this.flag = flag;\r\n    if (index !== undefined) {\r\n        this.index = index;\r\n    } else {\r\n        this.setRandomIndex(registerSet);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets the index property to a random value based on the provided register set\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @returns {RegisterReference} Reference to current object for chaining\r\n */\r\nRegisterReference.prototype.setRandomIndex = function (registerSet) {\r\n    if (this.flag === exports.INPUT) {\r\n        this.index = utils.randBetween(0, registerSet.options.numInputs);\r\n    } else if (this.flag === exports.CONSTANT) {\r\n        this.index = utils.randBetween(0, registerSet.const.length);\r\n    } else if (this.flag === exports.CALCULATION) {\r\n        this.index = utils.randBetween(0, registerSet.calc.length);\r\n    } else {\r\n        this.index = utils.randBetween(0, registerSet.out.length);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the value that this register reference represents in the given register set\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @returns {*} Value from the register set\r\n */\r\nRegisterReference.prototype.getValue = function (registerSet) {\r\n    return registerSet[this.flag][this.index];\r\n};\r\n\r\n/**\r\n * Sets the value that this register reference represents in the given register set\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @param {*} value - A value to set\r\n * @returns {RegisterReference} Reference to current object for chaining\r\n */\r\nRegisterReference.prototype.setValue = function (registerSet, value) {\r\n    if (this.flag !== exports.CALCULATION && this.flag !== exports.OUTPUT) {\r\n        throw \"only calculation or output registers can be set\";\r\n    } else {\r\n        registerSet[this.flag][this.index] = value;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Returns a string representation of register reference\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @returns {string} A string representation of the register reference\r\n */\r\nRegisterReference.prototype.toString = function () {\r\n    return utils.formatString(\"registerSet.{0}[{1}]\", [this.flag, this.index]);\r\n};\r\n\r\n/**\r\n * Returns a new input register reference\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @param {number} index - Optional user specified index\r\n * @returns {RegisterReference} A new input register reference\r\n */\r\nexports.createInput = function (registerSet, index) {\r\n    return new RegisterReference(exports.INPUT, registerSet, index);\r\n};\r\n\r\n/**\r\n * Returns a new constant register reference\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @param {number} index - Optional user specified index\r\n * @returns {RegisterReference} A new constant register reference\r\n */\r\nexports.createConstant = function (registerSet, index) {\r\n    return new RegisterReference(exports.CONSTANT, registerSet, index);\r\n};\r\n\r\n/**\r\n * Returns a new calculation register reference\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @param {number} index - Optional user specified index\r\n * @returns {RegisterReference} A new calculation register reference\r\n */\r\nexports.createCalculation = function (registerSet, index) {\r\n    return new RegisterReference(exports.CALCULATION, registerSet, index);\r\n};\r\n\r\n/**\r\n * Returns a new output register reference\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @param {number} index - Optional user specified index\r\n * @returns {RegisterReference} A new output register reference\r\n */\r\nexports.createOutput = function (registerSet, index) {\r\n    return new RegisterReference(exports.OUTPUT, registerSet, index);\r\n};\r\n\r\n/**\r\n * Creates a random readable register reference\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @returns {RegisterReference} A new readable register reference\r\n */\r\nexports.createRandomReadable = function (registerSet) {\r\n    var random = utils.random();\r\n    if (random < 0.25) {\r\n        return exports.createInput(registerSet);\r\n    } else if (random < 0.5 && registerSet.const.length > 0) {\r\n        return exports.createConstant(registerSet);\r\n    } else if (random < 0.75 && registerSet.calc.length > 0) {\r\n        return exports.createCalculation(registerSet);\r\n    } else {\r\n        return exports.createOutput(registerSet);\r\n    }\r\n};\r\n\r\n/**\r\n * Creates a random writable register reference\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @returns {RegisterReference} A new writable register reference\r\n */\r\nexports.createRandomWritable = function (registerSet) {\r\n    var random = utils.random();\r\n    if (random < 0.5 && registerSet.calc.length > 0) {\r\n        return exports.createCalculation(registerSet);\r\n    } else {\r\n        return exports.createOutput(registerSet);\r\n    }\r\n};\r\n\r\nexports.INPUT = 'input';\r\nexports.CONSTANT = 'const';\r\nexports.CALCULATION = 'calc';\r\nexports.OUTPUT = 'out';\r\nexports.RegisterReference = RegisterReference;","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/genetic/linear/linearConditionalNode.js":"var LinearGPNode = require('./linearGPNode').LinearGPNode;\r\nvar utils = require('./../../infrastructure/utils');\r\n\r\n/**\r\n * Linear genetic programming conditional node\r\n * @constructor\r\n * @extends LinearGPNode\r\n * @param {function} func - A function that this node will represent\r\n * @param {RegisterSet} registerSet - A register set instance\r\n */\r\nvar LinearConditionalNode = function (func, registers) {\r\n    LinearGPNode.call(this, func, registers);\r\n};\r\n\r\nutils.inherits(LinearConditionalNode, LinearGPNode);\r\n\r\n/**\r\n * Returns a string representation of the linear conditional node\r\n * @returns {string} A string representation of the linear conditional node\r\n */\r\nLinearConditionalNode.prototype.toString = function () {\r\n    return utils.formatString(\"if ({0}({1}))\", [this.func.name, this.getArgumentsString()]);\r\n};\r\n\r\n/**\r\n * Returns the return value of the function from the given register set\r\n * @param {RegisterSet} registerSet - A register set instance\r\n * @returns {boolean} The return value of the function from the given register set\r\n */\r\nLinearConditionalNode.prototype.execute = function (registerSet) {\r\n    return this.getFuncReturnValue(registerSet);\r\n};\r\n\r\nexports.LinearConditionalNode = LinearConditionalNode;","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/genetic/linear/registerSet.js":"var utils = require('./../../infrastructure/utils');\r\nvar clone = require('clone');\r\n\r\n/**\r\n * Linear genetic programming register set\r\n * @constructor\r\n * @param {object} options - Register set options\r\n * @param {number} options.numInputs - The number of input registers\r\n * @param {number} options.numOutputs - The number of output registers\r\n * @param {number} [options.constMin=1] - Minimum constant value\r\n * @param {number} [options.constMax=100] - Maxmimum constant value\r\n * @param {number} [options.constDivider=1] - Value to divide each constant value by\r\n * @param {number} [options.defaultCalculationValue=0] - Value to divide each constant value by\r\n * @param {number} [options.defaultOutputValue=0] - Value to divide each constant value by\r\n * @param {number} [options.numCalculationRegisters=5] - Value to divide each constant value by\r\n * @property {object[]} input - Input registers\r\n * @property {number[]} const - Constant registers\r\n * @property {number[]} calc - Calculation registers\r\n * @property {object[]} out - Output registers\r\n */\r\nvar RegisterSet = function (options) {\r\n    this.options = options;\r\n    this.input = [];\r\n    this.const = [];\r\n    this.calc = [];\r\n    this.out = [];\r\n    this.validate();\r\n};\r\n\r\n/**\r\n * Resets all registers\r\n * @returns {RegisterSet} Reference to current object for chaining\r\n */\r\nRegisterSet.prototype.reset = function () {\r\n    var i;\r\n    this.input = [];\r\n    this.const = [];\r\n    this.calc = [];\r\n    this.out = [];\r\n    for (i = this.options.constMin; i < this.options.constMax; i++) {\r\n        this.const.push(i / this.options.constDivider);\r\n    }\r\n    for (i = 0; i < this.options.numCalculationRegisters; i++) {\r\n        this.calc.push(this.options.defaultCalculationValue);\r\n    }\r\n    for (i = 0; i < this.options.numOutputs; i++) {\r\n        this.out.push(this.options.defaultOutputValue);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Set the input registers\r\n * @param {object[]} inputs - An array of inputs\r\n * @throws An exception is thrown if the length of the input array does not match options.numInputs\r\n * @returns {RegisterSet} Reference to current object for chaining\r\n */\r\nRegisterSet.prototype.setInputs = function (inputs) {\r\n    if (inputs.length !== this.options.numInputs) {\r\n        throw \"length of inputs does not equal expected length\";\r\n    }\r\n    this.reset();\r\n    this.input = inputs;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Validates the register set\r\n * @throws An exception is thrown if validation fails\r\n * @returns {RegisterSet} Reference to current object for chaining\r\n */\r\nRegisterSet.prototype.validate = function () {\r\n    this.setDefaultOptionsIfNotProvided().validateRequiredOptions().validateOptions().reset();\r\n};\r\n\r\n/**\r\n * Throws an exception if a required option is missing\r\n * @throws An exception is thrown if a required option is missing\r\n * @returns {RegisterSet} Reference to current object for chaining\r\n */\r\nRegisterSet.prototype.validateRequiredOptions = function () {\r\n    if (!this.options) {\r\n        throw \"options are required\";\r\n    } else if (!this.options.numInputs) {\r\n        throw \"option 'numInputs is required\";\r\n    } else if (!this.options.numOutputs) {\r\n        throw \"option 'numOutputs' is required\";\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Throws an exception if any option values are invalid\r\n * @throws An exception is thrown if any option values are invalid\r\n * @returns {RegisterSet} Reference to current object for chaining\r\n */\r\nRegisterSet.prototype.validateOptions = function () {\r\n    if (this.options.constMin > this.options.constMax) {\r\n        throw \"value for option 'constMin' cannot be greater than 'constMax'\";\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets default values for options that have not been defined\r\n * @returns {RegisterSet} Reference to current object for chaining\r\n */\r\nRegisterSet.prototype.setDefaultOptionsIfNotProvided = function () {\r\n    if (this.options.constMin === undefined) {\r\n        this.options.constMin = 1;\r\n    }\r\n    if (this.options.constMax === undefined) {\r\n        this.options.constMax = 100;\r\n    }\r\n    if (this.options.constDivider === undefined) {\r\n        this.options.constDivider = 1;\r\n    }\r\n    if (this.options.defaultCalculationValue === undefined) {\r\n        this.options.defaultCalculationValue = 0;\r\n    }\r\n    if (this.options.defaultOutputValue === undefined) {\r\n        this.options.defaultOutputValue = 0;\r\n    }\r\n    if (this.options.numCalculationRegisters === undefined) {\r\n        this.options.numCalculationRegisters = 5;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Returns a deep copy of the register set output array\r\n * @returns {object[]} A deep copy of the register set output array\r\n */\r\nRegisterSet.prototype.getOutputNodes = function () {\r\n    return clone(this.out);\r\n};\r\n\r\n/**\r\n * Returns the total number of writable registers\r\n * @returns {number} The total number of writable registers\r\n */\r\nRegisterSet.prototype.getTotalWritableRegisters = function () {\r\n    return this.calc.length + this.out.length;\r\n};\r\n\r\nexports.RegisterSet = RegisterSet;","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/genetic/linear/linearIndividual.js":"var clone = require('clone');\r\nvar utils = require('./../../infrastructure/utils');\r\nvar Individual = require('./../individual').Individual;\r\nvar RegisterSet = require('./registerSet').RegisterSet;\r\nvar registerReference = require('./registerReference');\r\nvar LinearFunctionNode = require('./linearFunctionNode').LinearFunctionNode;\r\nvar LinearConditionalNode = require('./linearConditionalNode').LinearConditionalNode;\r\n\r\n/**\r\n * Linear genetic programming individual\r\n * @constructor\r\n * @extends Individual\r\n * @param {object} options - Linear indivdual options\r\n * @param {number} options.numInputs - The number of inputs that the individual accepts\r\n * @param {number} options.numOutputs - The number of output the individual should return\r\n * @param {function[]} options.functionSet - An array of functions that are made available to the individual\r\n * @param {boolean} [options.removeIntrons=true] - Specify whether introns should be removed before execution\r\n * @param {function[]} [options.conditionalSet=[]] - An array of functions that can be used to control logic\r\n * @property {object} options - Linear indivdual options\r\n */\r\nvar LinearIndividual = function (options) {\r\n    this.options = options;\r\n    this.options.registerSet = new RegisterSet(clone(this.options));\r\n    this.setDefaultOptionsIfNotProvided();\r\n    Individual.call(this, options);\r\n    return this;\r\n};\r\n\r\nutils.inherits(LinearIndividual, Individual);\r\n\r\n/**\r\n * Validates the linear individuals current options\r\n * @throws An exception will occur if a required option is missing\r\n * @returns {LinearIndividual} Reference to current object for chaining\r\n */\r\nLinearIndividual.prototype.validateRequiredOptions = function () {\r\n    Individual.prototype.validateRequiredOptions.call(this);\r\n    if (!this.options.numInputs) {\r\n        throw \"option 'numInputs' is required\";\r\n    } else if (!this.options.numOutputs) {\r\n        throw \"option 'numOutputs' is required\";\r\n    } else if (!this.options.functionSet) {\r\n        throw \"option 'functionSet' is required\";\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets default values for options that have not been defined\r\n * @returns {LinearIndividual} Reference to current object for chaining\r\n */\r\nLinearIndividual.prototype.setDefaultOptionsIfNotProvided = function () {\r\n    if (this.options.removeIntrons === undefined) {\r\n        this.options.removeIntrons = true;\r\n    }\r\n    if (!this.options.conditionalSet) {\r\n        this.options.conditionalSet = [];\r\n    }\r\n};\r\n\r\n/**\r\n * Executes the liner code represented by the indivduals body\r\n * @param {object[]} An array of inputs\r\n * @returns {object[]} An array of outputs\r\n */\r\nLinearIndividual.prototype.execute = function (inputs) {\r\n    if (this.options.removeIntrons) {\r\n        this.removeIntrons();\r\n    }\r\n    var i = 0;\r\n    this.options.registerSet.setInputs(inputs);\r\n    while (i < this.body.length) {\r\n        var node = this.body[i];\r\n        if (node instanceof LinearFunctionNode) {\r\n            node.execute(this.options.registerSet);\r\n        } else if (node instanceof LinearConditionalNode) {\r\n            if (!node.execute(this.options.registerSet)) {\r\n                while (this.body[i] instanceof LinearConditionalNode) {\r\n                    i++;\r\n                }\r\n            }\r\n        } else {\r\n            throw \"unknown node type\";\r\n        }\r\n        i++;\r\n    }\r\n    return this.options.registerSet.getOutputNodes();\r\n};\r\n\r\n/**\r\n * Removes all structurally noneffective code until the body length reaches the minimum allowed length\r\n * @returns {LinearIndividual} Reference to current object for chaining\r\n */\r\nLinearIndividual.prototype.removeIntrons = function () {\r\n    var references = [];\r\n    var firstAssignment = false;\r\n    var removeConditional = false;\r\n    var i = this.body.length - 1\r\n    while (i >= 0 && this.body.length > this.options.minLength) {\r\n        var node = this.body[i];\r\n        if (!firstAssignment) {\r\n            if (node instanceof LinearConditionalNode ||\r\n                node.targetRegister.flag !== registerReference.OUTPUT) {\r\n                this.body.splice(i, 1);\r\n            } else {\r\n                firstAssignment = true;\r\n                references = references.concat(node.inputRegisters);\r\n            }\r\n        } else {\r\n            if (removeConditional && node instanceof LinearConditionalNode) {\r\n                this.body.splice(i, 1);\r\n            } else {\r\n                removeConditional = false;\r\n                if (node instanceof LinearFunctionNode) {\r\n                    var isEffective = false;\r\n                    for (var j = 0; j < references.length; j++) {\r\n                        var reference = references[j];\r\n                        if (reference.flag === node.targetRegister.flag &&\r\n                            reference.index === node.targetRegister.index) {\r\n                            isEffective = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (isEffective) {\r\n                        references = references.concat(node.inputRegisters);\r\n                    } else {\r\n                        this.body.splice(i, 1);\r\n                        removeConditional = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Returns a string containing an executable representation of the individual\r\n * @returns {string} A string containing an executable representation of the individual\r\n */\r\nLinearIndividual.prototype.toString = function () {\r\n    var toReturn = \"\";\r\n    var numIndents = 0;\r\n    var i, j;\r\n    for (i = 0; i < this.body.length; i++) {\r\n        var node = this.body[i];\r\n        for (j = 0; j < numIndents; j++) {\r\n            toReturn += '\\t';\r\n        }\r\n        toReturn += node.toString() + '\\n';\r\n        if (node instanceof LinearFunctionNode) {\r\n            numIndents = 0;\r\n        } else {\r\n            numIndents += 1;\r\n        }\r\n    }\r\n    return toReturn;\r\n};\r\n\r\nexports.LinearIndividual = LinearIndividual;","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/neural/transferFunctions.js":"\r\n/**\r\n * Performs hard limit transfer\r\n * @param {number} input - Sum of neuron weighted inputs\r\n * @returns {number} 1 if the input is greater than 0, else 0\r\n */\r\nexports.hardLimit = function (input) {\r\n    return input >= 0 ? 1 : 0;\r\n};\r\n\r\n/**\r\n * Performs symetrical hard limit transfer\r\n * @param {number} input - Sum of neuron weighted inputs\r\n * @returns {number} 1 if the input is greater than 0, else -1\r\n */\r\nexports.symetricalHardLimit = function (input) {\r\n    return input >= 0 ? 1 : -1;\r\n};\r\n\r\n/**\r\n * Performs linear transfer\r\n * @param {number} input - Sum of neuron weighted inputs\r\n * @returns {number} The same, un modified value provided as input\r\n */\r\nexports.linear = function (input) {\r\n    return input;\r\n};\r\n\r\n/**\r\n * Performs saturating linear transfer\r\n * @param {number} input - Sum of neuron weighted inputs\r\n * @returns {number} The same value if between 0 and 1, otherwise 0 or 1 respectively\r\n */\r\nexports.saturatingLinear = function (input) {\r\n    if (input < 0) {\r\n        return 0;\r\n    } else if (input > 1) {\r\n        return 1;\r\n    } else {\r\n        return input;\r\n    }\r\n};\r\n\r\n/**\r\n * Performs log sigmoid transfer\r\n * @param {number} input - Sum of neuron weighted inputs\r\n * @returns {number} The log sigmoid of the input value\r\n */\r\nexports.logSigmoid = function (input) {\r\n    return 1 / (1 + Math.exp(-input))\r\n};\r\n\r\n/**\r\n * Performs hyperbolic tangent sigmoid transfer\r\n * @param {number} input - Sum of neuron weighted inputs\r\n * @returns {number} The hyperbolic tangent sigmoid of the input value\r\n */\r\nexports.hyperbolicTangentSigmoid = function (input) {\r\n    return (Math.exp(input) - Math.exp(-input)) / (Math.exp(input) + Math.exp(-input));\r\n};","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/documentation/scripts/linenumber.js":"/*global document */\r\n(function() {\r\n    var source = document.getElementsByClassName('prettyprint source linenums');\r\n    var i = 0;\r\n    var lineNumber = 0;\r\n    var lineId;\r\n    var lines;\r\n    var totalLines;\r\n    var anchorHash;\r\n\r\n    if (source && source[0]) {\r\n        anchorHash = document.location.hash.substring(1);\r\n        lines = source[0].getElementsByTagName('li');\r\n        totalLines = lines.length;\r\n\r\n        for (; i < totalLines; i++) {\r\n            lineNumber++;\r\n            lineId = 'line' + lineNumber;\r\n            lines[i].id = lineId;\r\n            if (lineId === anchorHash) {\r\n                lines[i].className += ' selected';\r\n            }\r\n        }\r\n    }\r\n})();\r\n","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/neural/feedForwardNetwork.js":"var FeedForwardNetwork = function (options) {\r\n    this.options = options;\r\n};\r\n\r\nexports.FeedForwardNetwork = FeedForwardNetwork;","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/src/neural/neuron.js":"var utils = require('./../infrastructure/utils');\r\n\r\n/**\r\n * Neural network neuron\r\n * @constructor\r\n * @param {object} options - Neuron options\r\n * @param {number} options.numInputs - The number of inputs that the neuron accepts\r\n * @param {function} options.transferFunction - The transfer function to apply to the neuron\r\n * @param {number} [options.bias=1] - The bias value for the neuron\r\n * @property {number[]} weights - The neurons weights values\r\n * @property {object} options - Linear indivdual options\r\n */\r\nvar Neuron = function (options) {\r\n    this.weights = [];\r\n    this.biasWeight = 0;\r\n    this.options = options;\r\n    this.setDefaultOptionsIfNotProvided();\r\n    this.validateRequiredOptions();\r\n    this.initialise();\r\n};\r\n\r\n/**\r\n * Validates the individuals current options\r\n * @throws An exception will occur if a required option is missing\r\n * @returns {Neuron} Reference to current object for chaining\r\n */\r\nNeuron.prototype.validateRequiredOptions = function () {\r\n    if (!this.options.numInputs) {\r\n        throw \"option 'numInputs' is required\";\r\n    } else if (!this.options.transferFunction) {\r\n        throw \"option 'transferFunction' is required\";\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets default values for options that have not been defined\r\n * @returns {Neuron} Reference to current object for chaining\r\n */\r\nNeuron.prototype.setDefaultOptionsIfNotProvided = function () {\r\n    if (!this.options.bias) {\r\n        this.options.bias = 1;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Re creates the neuron with randomly generated weight values\r\n * @returns {Neuron} Reference to current object for chaining\r\n */\r\nNeuron.prototype.initialise = function () {\r\n    this.biasWeight = utils.random();\r\n    this.weights = [];\r\n    for (var i=0; i < this.options.numInputs+1; i++) {\r\n        this.weights.push(utils.random());\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the neuron output based on an array of inputs\r\n * @returns {number} The neuron output based on an array of inputs\r\n */\r\nNeuron.prototype.getOutput = function (inputs) {\r\n    if (!inputs.length === this.options.numInputs) {\r\n        throw \"Invalid number of inputs\";   \r\n    }\r\n    else {\r\n        var sum = 0;\r\n        for (var i=0; i < inputs.length; i++) {\r\n            sum += inputs[i] * this.weights[i];\r\n        }\r\n        sum += (this.options.bias * this.biasWeight);\r\n        return this.options.transferFunction(sum);\r\n    }\r\n};","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/documentation/scripts/prettify/lang-css.js":"PR.registerLangHandler(PR.createSimpleLexer([[\"pln\",/^[\\t\\n\\f\\r ]+/,null,\" \\t\\r\\n\f\"]],[[\"str\",/^\"(?:[^\\n\\f\\r\"\\\\]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\S\\s])*\"/,null],[\"str\",/^'(?:[^\\n\\f\\r'\\\\]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\S\\s])*'/,null],[\"lang-css-str\",/^url\\(([^\"')]*)\\)/i],[\"kwd\",/^(?:url|rgb|!important|@import|@page|@media|@charset|inherit)(?=[^\\w-]|$)/i,null],[\"lang-css-kw\",/^(-?(?:[_a-z]|\\\\[\\da-f]+ ?)(?:[\\w-]|\\\\\\\\[\\da-f]+ ?)*)\\s*:/i],[\"com\",/^\\/\\*[^*]*\\*+(?:[^*/][^*]*\\*+)*\\//],[\"com\",\r\n/^(?:<\\!--|--\\>)/],[\"lit\",/^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i],[\"lit\",/^#[\\da-f]{3,6}/i],[\"pln\",/^-?(?:[_a-z]|\\\\[\\da-f]+ ?)(?:[\\w-]|\\\\\\\\[\\da-f]+ ?)*/i],[\"pun\",/^[^\\s\\w\"']+/]]),[\"css\"]);PR.registerLangHandler(PR.createSimpleLexer([],[[\"kwd\",/^-?(?:[_a-z]|\\\\[\\da-f]+ ?)(?:[\\w-]|\\\\\\\\[\\da-f]+ ?)*/i]]),[\"css-kw\"]);PR.registerLangHandler(PR.createSimpleLexer([],[[\"str\",/^[^\"')]+/]]),[\"css-str\"]);\r\n","/home/travis/build/npmtest/node-npmtest-intelligence/node_modules/intelligence/documentation/scripts/prettify/prettify.js":"var q=null;window.PR_SHOULD_USE_CONTINUATION=!0;\r\n(function(){function L(a){function m(a){var f=a.charCodeAt(0);if(f!==92)return f;var b=a.charAt(1);return(f=r[b])?f:\"0\"<=b&&b<=\"7\"?parseInt(a.substring(1),8):b===\"u\"||b===\"x\"?parseInt(a.substring(2),16):a.charCodeAt(1)}function e(a){if(a<32)return(a<16?\"\\\\x0\":\"\\\\x\")+a.toString(16);a=String.fromCharCode(a);if(a===\"\\\\\"||a===\"-\"||a===\"[\"||a===\"]\")a=\"\\\\\"+a;return a}function h(a){for(var f=a.substring(1,a.length-1).match(/\\\\u[\\dA-Fa-f]{4}|\\\\x[\\dA-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\S\\s]|[^\\\\]/g),a=\r\n[],b=[],o=f[0]===\"^\",c=o?1:0,i=f.length;c<i;++c){var j=f[c];if(/\\\\[bdsw]/i.test(j))a.push(j);else{var j=m(j),d;c+2<i&&\"-\"===f[c+1]?(d=m(f[c+2]),c+=2):d=j;b.push([j,d]);d<65||j>122||(d<65||j>90||b.push([Math.max(65,j)|32,Math.min(d,90)|32]),d<97||j>122||b.push([Math.max(97,j)&-33,Math.min(d,122)&-33]))}}b.sort(function(a,f){return a[0]-f[0]||f[1]-a[1]});f=[];j=[NaN,NaN];for(c=0;c<b.length;++c)i=b[c],i[0]<=j[1]+1?j[1]=Math.max(j[1],i[1]):f.push(j=i);b=[\"[\"];o&&b.push(\"^\");b.push.apply(b,a);for(c=0;c<\r\nf.length;++c)i=f[c],b.push(e(i[0])),i[1]>i[0]&&(i[1]+1>i[0]&&b.push(\"-\"),b.push(e(i[1])));b.push(\"]\");return b.join(\"\")}function y(a){for(var f=a.source.match(/\\[(?:[^\\\\\\]]|\\\\[\\S\\s])*]|\\\\u[\\dA-Fa-f]{4}|\\\\x[\\dA-Fa-f]{2}|\\\\\\d+|\\\\[^\\dux]|\\(\\?[!:=]|[()^]|[^()[\\\\^]+/g),b=f.length,d=[],c=0,i=0;c<b;++c){var j=f[c];j===\"(\"?++i:\"\\\\\"===j.charAt(0)&&(j=+j.substring(1))&&j<=i&&(d[j]=-1)}for(c=1;c<d.length;++c)-1===d[c]&&(d[c]=++t);for(i=c=0;c<b;++c)j=f[c],j===\"(\"?(++i,d[i]===void 0&&(f[c]=\"(?:\")):\"\\\\\"===j.charAt(0)&&\r\n(j=+j.substring(1))&&j<=i&&(f[c]=\"\\\\\"+d[i]);for(i=c=0;c<b;++c)\"^\"===f[c]&&\"^\"!==f[c+1]&&(f[c]=\"\");if(a.ignoreCase&&s)for(c=0;c<b;++c)j=f[c],a=j.charAt(0),j.length>=2&&a===\"[\"?f[c]=h(j):a!==\"\\\\\"&&(f[c]=j.replace(/[A-Za-z]/g,function(a){a=a.charCodeAt(0);return\"[\"+String.fromCharCode(a&-33,a|32)+\"]\"}));return f.join(\"\")}for(var t=0,s=!1,l=!1,p=0,d=a.length;p<d;++p){var g=a[p];if(g.ignoreCase)l=!0;else if(/[a-z]/i.test(g.source.replace(/\\\\u[\\da-f]{4}|\\\\x[\\da-f]{2}|\\\\[^UXux]/gi,\"\"))){s=!0;l=!1;break}}for(var r=\r\n{b:8,t:9,n:10,v:11,f:12,r:13},n=[],p=0,d=a.length;p<d;++p){g=a[p];if(g.global||g.multiline)throw Error(\"\"+g);n.push(\"(?:\"+y(g)+\")\")}return RegExp(n.join(\"|\"),l?\"gi\":\"g\")}function M(a){function m(a){switch(a.nodeType){case 1:if(e.test(a.className))break;for(var g=a.firstChild;g;g=g.nextSibling)m(g);g=a.nodeName;if(\"BR\"===g||\"LI\"===g)h[s]=\"\\n\",t[s<<1]=y++,t[s++<<1|1]=a;break;case 3:case 4:g=a.nodeValue,g.length&&(g=p?g.replace(/\\r\\n?/g,\"\\n\"):g.replace(/[\\t\\n\\r ]+/g,\" \"),h[s]=g,t[s<<1]=y,y+=g.length,\r\nt[s++<<1|1]=a)}}var e=/(?:^|\\s)nocode(?:\\s|$)/,h=[],y=0,t=[],s=0,l;a.currentStyle?l=a.currentStyle.whiteSpace:window.getComputedStyle&&(l=document.defaultView.getComputedStyle(a,q).getPropertyValue(\"white-space\"));var p=l&&\"pre\"===l.substring(0,3);m(a);return{a:h.join(\"\").replace(/\\n$/,\"\"),c:t}}function B(a,m,e,h){m&&(a={a:m,d:a},e(a),h.push.apply(h,a.e))}function x(a,m){function e(a){for(var l=a.d,p=[l,\"pln\"],d=0,g=a.a.match(y)||[],r={},n=0,z=g.length;n<z;++n){var f=g[n],b=r[f],o=void 0,c;if(typeof b===\r\n\"string\")c=!1;else{var i=h[f.charAt(0)];if(i)o=f.match(i[1]),b=i[0];else{for(c=0;c<t;++c)if(i=m[c],o=f.match(i[1])){b=i[0];break}o||(b=\"pln\")}if((c=b.length>=5&&\"lang-\"===b.substring(0,5))&&!(o&&typeof o[1]===\"string\"))c=!1,b=\"src\";c||(r[f]=b)}i=d;d+=f.length;if(c){c=o[1];var j=f.indexOf(c),k=j+c.length;o[2]&&(k=f.length-o[2].length,j=k-c.length);b=b.substring(5);B(l+i,f.substring(0,j),e,p);B(l+i+j,c,C(b,c),p);B(l+i+k,f.substring(k),e,p)}else p.push(l+i,b)}a.e=p}var h={},y;(function(){for(var e=a.concat(m),\r\nl=[],p={},d=0,g=e.length;d<g;++d){var r=e[d],n=r[3];if(n)for(var k=n.length;--k>=0;)h[n.charAt(k)]=r;r=r[1];n=\"\"+r;p.hasOwnProperty(n)||(l.push(r),p[n]=q)}l.push(/[\\S\\s]/);y=L(l)})();var t=m.length;return e}function u(a){var m=[],e=[];a.tripleQuotedStrings?m.push([\"str\",/^(?:'''(?:[^'\\\\]|\\\\[\\S\\s]|''?(?=[^']))*(?:'''|$)|\"\"\"(?:[^\"\\\\]|\\\\[\\S\\s]|\"\"?(?=[^\"]))*(?:\"\"\"|$)|'(?:[^'\\\\]|\\\\[\\S\\s])*(?:'|$)|\"(?:[^\"\\\\]|\\\\[\\S\\s])*(?:\"|$))/,q,\"'\\\"\"]):a.multiLineStrings?m.push([\"str\",/^(?:'(?:[^'\\\\]|\\\\[\\S\\s])*(?:'|$)|\"(?:[^\"\\\\]|\\\\[\\S\\s])*(?:\"|$)|`(?:[^\\\\`]|\\\\[\\S\\s])*(?:`|$))/,\r\nq,\"'\\\"`\"]):m.push([\"str\",/^(?:'(?:[^\\n\\r'\\\\]|\\\\.)*(?:'|$)|\"(?:[^\\n\\r\"\\\\]|\\\\.)*(?:\"|$))/,q,\"\\\"'\"]);a.verbatimStrings&&e.push([\"str\",/^@\"(?:[^\"]|\"\")*(?:\"|$)/,q]);var h=a.hashComments;h&&(a.cStyleComments?(h>1?m.push([\"com\",/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,q,\"#\"]):m.push([\"com\",/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\n\\r]*)/,q,\"#\"]),e.push([\"str\",/^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)>/,q])):m.push([\"com\",/^#[^\\n\\r]*/,\r\nq,\"#\"]));a.cStyleComments&&(e.push([\"com\",/^\\/\\/[^\\n\\r]*/,q]),e.push([\"com\",/^\\/\\*[\\S\\s]*?(?:\\*\\/|$)/,q]));a.regexLiterals&&e.push([\"lang-regex\",/^(?:^^\\.?|[!+-]|!=|!==|#|%|%=|&|&&|&&=|&=|\\(|\\*|\\*=|\\+=|,|-=|->|\\/|\\/=|:|::|;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|[?@[^]|\\^=|\\^\\^|\\^\\^=|{|\\||\\|=|\\|\\||\\|\\|=|~|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*(\\/(?=[^*/])(?:[^/[\\\\]|\\\\[\\S\\s]|\\[(?:[^\\\\\\]]|\\\\[\\S\\s])*(?:]|$))+\\/)/]);(h=a.types)&&e.push([\"typ\",h]);a=(\"\"+a.keywords).replace(/^ | $/g,\r\n\"\");a.length&&e.push([\"kwd\",RegExp(\"^(?:\"+a.replace(/[\\s,]+/g,\"|\")+\")\\\\b\"),q]);m.push([\"pln\",/^\\s+/,q,\" \\r\\n\\t\\xa0\"]);e.push([\"lit\",/^@[$_a-z][\\w$@]*/i,q],[\"typ\",/^(?:[@_]?[A-Z]+[a-z][\\w$@]*|\\w+_t\\b)/,q],[\"pln\",/^[$_a-z][\\w$@]*/i,q],[\"lit\",/^(?:0x[\\da-f]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+-]?\\d+)?)[a-z]*/i,q,\"0123456789\"],[\"pln\",/^\\\\[\\S\\s]?/,q],[\"pun\",/^.[^\\s\\w\"-$'./@\\\\`]*/,q]);return x(m,e)}function D(a,m){function e(a){switch(a.nodeType){case 1:if(k.test(a.className))break;if(\"BR\"===a.nodeName)h(a),\r\na.parentNode&&a.parentNode.removeChild(a);else for(a=a.firstChild;a;a=a.nextSibling)e(a);break;case 3:case 4:if(p){var b=a.nodeValue,d=b.match(t);if(d){var c=b.substring(0,d.index);a.nodeValue=c;(b=b.substring(d.index+d[0].length))&&a.parentNode.insertBefore(s.createTextNode(b),a.nextSibling);h(a);c||a.parentNode.removeChild(a)}}}}function h(a){function b(a,d){var e=d?a.cloneNode(!1):a,f=a.parentNode;if(f){var f=b(f,1),g=a.nextSibling;f.appendChild(e);for(var h=g;h;h=g)g=h.nextSibling,f.appendChild(h)}return e}\r\nfor(;!a.nextSibling;)if(a=a.parentNode,!a)return;for(var a=b(a.nextSibling,0),e;(e=a.parentNode)&&e.nodeType===1;)a=e;d.push(a)}var k=/(?:^|\\s)nocode(?:\\s|$)/,t=/\\r\\n?|\\n/,s=a.ownerDocument,l;a.currentStyle?l=a.currentStyle.whiteSpace:window.getComputedStyle&&(l=s.defaultView.getComputedStyle(a,q).getPropertyValue(\"white-space\"));var p=l&&\"pre\"===l.substring(0,3);for(l=s.createElement(\"LI\");a.firstChild;)l.appendChild(a.firstChild);for(var d=[l],g=0;g<d.length;++g)e(d[g]);m===(m|0)&&d[0].setAttribute(\"value\",\r\nm);var r=s.createElement(\"OL\");r.className=\"linenums\";for(var n=Math.max(0,m-1|0)||0,g=0,z=d.length;g<z;++g)l=d[g],l.className=\"L\"+(g+n)%10,l.firstChild||l.appendChild(s.createTextNode(\"\\xa0\")),r.appendChild(l);a.appendChild(r)}function k(a,m){for(var e=m.length;--e>=0;){var h=m[e];A.hasOwnProperty(h)?window.console&&console.warn(\"cannot override language handler %s\",h):A[h]=a}}function C(a,m){if(!a||!A.hasOwnProperty(a))a=/^\\s*</.test(m)?\"default-markup\":\"default-code\";return A[a]}function E(a){var m=\r\na.g;try{var e=M(a.h),h=e.a;a.a=h;a.c=e.c;a.d=0;C(m,h)(a);var k=/\\bMSIE\\b/.test(navigator.userAgent),m=/\\n/g,t=a.a,s=t.length,e=0,l=a.c,p=l.length,h=0,d=a.e,g=d.length,a=0;d[g]=s;var r,n;for(n=r=0;n<g;)d[n]!==d[n+2]?(d[r++]=d[n++],d[r++]=d[n++]):n+=2;g=r;for(n=r=0;n<g;){for(var z=d[n],f=d[n+1],b=n+2;b+2<=g&&d[b+1]===f;)b+=2;d[r++]=z;d[r++]=f;n=b}for(d.length=r;h<p;){var o=l[h+2]||s,c=d[a+2]||s,b=Math.min(o,c),i=l[h+1],j;if(i.nodeType!==1&&(j=t.substring(e,b))){k&&(j=j.replace(m,\"\\r\"));i.nodeValue=\r\nj;var u=i.ownerDocument,v=u.createElement(\"SPAN\");v.className=d[a+1];var x=i.parentNode;x.replaceChild(v,i);v.appendChild(i);e<o&&(l[h+1]=i=u.createTextNode(t.substring(b,o)),x.insertBefore(i,v.nextSibling))}e=b;e>=o&&(h+=2);e>=c&&(a+=2)}}catch(w){\"console\"in window&&console.log(w&&w.stack?w.stack:w)}}var v=[\"break,continue,do,else,for,if,return,while\"],w=[[v,\"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"],\r\n\"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof\"],F=[w,\"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where\"],G=[w,\"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient\"],\r\nH=[G,\"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var\"],w=[w,\"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN\"],I=[v,\"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None\"],\r\nJ=[v,\"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END\"],v=[v,\"case,done,elif,esac,eval,fi,function,in,local,set,then,until\"],K=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\\d*)/,N=/\\S/,O=u({keywords:[F,H,w,\"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END\"+\r\nI,J,v],hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),A={};k(O,[\"default-code\"]);k(x([],[[\"pln\",/^[^<?]+/],[\"dec\",/^<!\\w[^>]*(?:>|$)/],[\"com\",/^<\\!--[\\S\\s]*?(?:--\\>|$)/],[\"lang-\",/^<\\?([\\S\\s]+?)(?:\\?>|$)/],[\"lang-\",/^<%([\\S\\s]+?)(?:%>|$)/],[\"pun\",/^(?:<[%?]|[%?]>)/],[\"lang-\",/^<xmp\\b[^>]*>([\\S\\s]+?)<\\/xmp\\b[^>]*>/i],[\"lang-js\",/^<script\\b[^>]*>([\\S\\s]*?)(<\\/script\\b[^>]*>)/i],[\"lang-css\",/^<style\\b[^>]*>([\\S\\s]*?)(<\\/style\\b[^>]*>)/i],[\"lang-in.tag\",/^(<\\/?[a-z][^<>]*>)/i]]),\r\n[\"default-markup\",\"htm\",\"html\",\"mxml\",\"xhtml\",\"xml\",\"xsl\"]);k(x([[\"pln\",/^\\s+/,q,\" \\t\\r\\n\"],[\"atv\",/^(?:\"[^\"]*\"?|'[^']*'?)/,q,\"\\\"'\"]],[[\"tag\",/^^<\\/?[a-z](?:[\\w-.:]*\\w)?|\\/?>$/i],[\"atn\",/^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],[\"lang-uq.val\",/^=\\s*([^\\s\"'>]*(?:[^\\s\"'/>]|\\/(?=\\s)))/],[\"pun\",/^[/<->]+/],[\"lang-js\",/^on\\w+\\s*=\\s*\"([^\"]+)\"/i],[\"lang-js\",/^on\\w+\\s*=\\s*'([^']+)'/i],[\"lang-js\",/^on\\w+\\s*=\\s*([^\\s\"'>]+)/i],[\"lang-css\",/^style\\s*=\\s*\"([^\"]+)\"/i],[\"lang-css\",/^style\\s*=\\s*'([^']+)'/i],[\"lang-css\",\r\n/^style\\s*=\\s*([^\\s\"'>]+)/i]]),[\"in.tag\"]);k(x([],[[\"atv\",/^[\\S\\s]+/]]),[\"uq.val\"]);k(u({keywords:F,hashComments:!0,cStyleComments:!0,types:K}),[\"c\",\"cc\",\"cpp\",\"cxx\",\"cyc\",\"m\"]);k(u({keywords:\"null,true,false\"}),[\"json\"]);k(u({keywords:H,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:K}),[\"cs\"]);k(u({keywords:G,cStyleComments:!0}),[\"java\"]);k(u({keywords:v,hashComments:!0,multiLineStrings:!0}),[\"bsh\",\"csh\",\"sh\"]);k(u({keywords:I,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),\r\n[\"cv\",\"py\"]);k(u({keywords:\"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END\",hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),[\"perl\",\"pl\",\"pm\"]);k(u({keywords:J,hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),[\"rb\"]);k(u({keywords:w,cStyleComments:!0,regexLiterals:!0}),[\"js\"]);k(u({keywords:\"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes\",\r\nhashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),[\"coffee\"]);k(x([],[[\"str\",/^[\\S\\s]+/]]),[\"regex\"]);window.prettyPrintOne=function(a,m,e){var h=document.createElement(\"PRE\");h.innerHTML=a;e&&D(h,e);E({g:m,i:e,h:h});return h.innerHTML};window.prettyPrint=function(a){function m(){for(var e=window.PR_SHOULD_USE_CONTINUATION?l.now()+250:Infinity;p<h.length&&l.now()<e;p++){var n=h[p],k=n.className;if(k.indexOf(\"prettyprint\")>=0){var k=k.match(g),f,b;if(b=\r\n!k){b=n;for(var o=void 0,c=b.firstChild;c;c=c.nextSibling)var i=c.nodeType,o=i===1?o?b:c:i===3?N.test(c.nodeValue)?b:o:o;b=(f=o===b?void 0:o)&&\"CODE\"===f.tagName}b&&(k=f.className.match(g));k&&(k=k[1]);b=!1;for(o=n.parentNode;o;o=o.parentNode)if((o.tagName===\"pre\"||o.tagName===\"code\"||o.tagName===\"xmp\")&&o.className&&o.className.indexOf(\"prettyprint\")>=0){b=!0;break}b||((b=(b=n.className.match(/\\blinenums\\b(?::(\\d+))?/))?b[1]&&b[1].length?+b[1]:!0:!1)&&D(n,b),d={g:k,h:n,i:b},E(d))}}p<h.length?setTimeout(m,\r\n250):a&&a()}for(var e=[document.getElementsByTagName(\"pre\"),document.getElementsByTagName(\"code\"),document.getElementsByTagName(\"xmp\")],h=[],k=0;k<e.length;++k)for(var t=0,s=e[k].length;t<s;++t)h.push(e[k][t]);var e=q,l=Date;l.now||(l={now:function(){return+new Date}});var p=0,d,g=/\\blang(?:uage)?-([\\w.]+)(?!\\S)/;m()};window.PR={createSimpleLexer:x,registerLangHandler:k,sourceDecorator:u,PR_ATTRIB_NAME:\"atn\",PR_ATTRIB_VALUE:\"atv\",PR_COMMENT:\"com\",PR_DECLARATION:\"dec\",PR_KEYWORD:\"kwd\",PR_LITERAL:\"lit\",\r\nPR_NOCODE:\"nocode\",PR_PLAIN:\"pln\",PR_PUNCTUATION:\"pun\",PR_SOURCE:\"src\",PR_STRING:\"str\",PR_TAG:\"tag\",PR_TYPE:\"typ\"}})();\r\n"}